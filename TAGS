
add.py,246
from fipy.meshes.numMesh.mesh2D import Mesh2DMesh2D1,0
class Cylinderizer(Mesh2D):Cylinderizer3,47
   def __init__(self, mesh):__init__4,75
   def _getFaceAreas(self):_getFaceAreas10,265
   def getCellVolumes(self):getCellVolumes13,362

chemistry.py,5584
import sys, ossys14,294
import sys, osos14,294
import mathmath15,309
import pylab, numpypylab16,321
import pylab, numpynumpy16,321
from scipy.integrate import odeintodeint17,341
import rere18,376
import quantities as pqpq23,612
import ctml_writer as ctmlctml34,996
from ctml_writer import units, OneAtmunits35,1023
from ctml_writer import units, OneAtmOneAtm35,1023
_uConc=pq.Quantity(1,ctml._umol) / pq.Quantity(1,ctml._ulen)**3_uConc37,1062
_uTime=pq.Quantity(1,ctml._utime)_uTime38,1126
_species=ctml._species_species40,1161
_reactions=ctml._reactions_reactions41,1184
_speciesnames=ctml._speciesnames_speciesnames42,1211
class outsideValidRangeError(Exception):outsideValidRangeError45,1246
class ideal_gas(ctml.ideal_gas):ideal_gas49,1353
class state(ctml.state):state53,1428
class species(ctml.species):species57,1486
    def getCorrectNasaPoly(self,T):getCorrectNasaPoly61,1626
    def getGibbsFreeEnergy(self,T):getGibbsFreeEnergy66,1802
    def getThermo(self,T):getThermo70,1985
class NASA(ctml.NASA):NASA74,2090
    def ValidTemperature(self,temperature):ValidTemperature76,2164
    def getThermo(self,T):getThermo82,2408
    def getGibbsFreeEnergy(self,T):getGibbsFreeEnergy106,3557
class reaction(ctml.reaction):reaction114,3971
    def getForwardRateCoefficient(self,T):getForwardRateCoefficient117,4038
    def getReverseRateCoefficient(self,T):getReverseRateCoefficient136,4884
    def getDeltaGoverR(self,T):getDeltaGoverR146,5373
    def getEquilibriumConstant(self,T):getEquilibriumConstant155,5850
    def getReactantNu(self):getReactantNu171,6576
    def getProductNu(self):getProductNu182,7004
    def getDeltaNu(self):getDeltaNu193,7420
    def getStoichiometryReactantsRow(self):getStoichiometryReactantsRow202,7774
    def getStoichiometryProductsRow(self):getStoichiometryProductsRow208,8055
    def getStoichiometryNetRow(self):getStoichiometryNetRow214,8334
def getStoichiometryArrays():getStoichiometryArrays219,8566
def getForwardRateCoefficientsVector(T):getForwardRateCoefficientsVector236,9289
def getReverseRateCoefficientsVector(T):getReverseRateCoefficientsVector243,9614
def getSpeciesByName(name):getSpeciesByName250,9935
def ArrayFromDict(inDict):ArrayFromDict257,10090
def DictFromArray(inArray, units=None):DictFromArray269,10533
class PropertiesOfSpecies():PropertiesOfSpecies283,10951
    _calculated_properties = dict() _calculated_properties293,11258
    def __init__(self, properties_dict):__init__295,11304
    def _getAttributeNames(self):_getAttributeNames306,11713
    def __getattr__(self,property_name):__getattr__310,11896
    def getMolarVolume(self):getMolarVolume324,12484
    def getPartitionCoefficient(self):getPartitionCoefficient334,13000
    def getDiffusivityInAir(self,Temperature,pressure_in_bar):getDiffusivityInAir368,14222
    def getNumberOfCarbons(self):getNumberOfCarbons391,15001
    def getNumberOfHydrogens(self):getNumberOfHydrogens398,15295
    def getNumberOfOxygens(self):getNumberOfOxygens405,15593
class PropertiesStore():PropertiesStore414,15905
    def __init__(self, resultsDir='RMG_results'):__init__418,16025
    def __getattr__(self, property_name):__getattr__422,16167
    def __getitem__(self,species_name):__getitem__434,16525
    def loadPropertiesFromFile(self, resultsDir):loadPropertiesFromFile439,16706
        import csvcsv446,16982
    def getSpeciesProperty(self,species_name,property_name):getSpeciesProperty455,17403
    def getPropertyArray(self,property_name):getPropertyArray473,18243
class ChemistrySolver():ChemistrySolver482,18678
    def __init__(self, resultsDir='RMG_results'):__init__485,18738
    def loadChemistryModel(self, resultsDir):loadChemistryModel498,19196
    def getSpeciesNames(self):getSpeciesNames510,19661
    def setConcentrations(self, concentrations, zero_others=False):setConcentrations513,19726
    def getConcentrations(self):getConcentrations534,20976
    def calculateStoichiometries(self):calculateStoichiometries537,21049
    def setTemperature(self, T):setTemperature546,21451
    def calculateRateCoefficients(self, T):calculateRateCoefficients560,21847
    def getRightSideOfODE(self):getRightSideOfODE571,22340
        def RightSideOfODE(concentrations, time):RightSideOfODE574,22535
    def solveConcentrationsAfterTime(self, starting_concentrations, reaction_time, temperature=None ):solveConcentrationsAfterTime583,23096
class FuelComponent():FuelComponent600,23923
    def __str__(self):__str__603,24035
    def __init__(self, name="",__init__605,24100
    import sys, ossys618,24617
    import sys, osos618,24617
    fuel=[fuel626,24881
    concs_dict=dict.fromkeys( solver.getSpeciesNames() )concs_dict635,25639
    T=430 # kelvinT645,26112
    start=0start650,26233
    stop=10stop651,26245
    steps=1001steps652,26257
    timesteps=pylab.linspace(start,stop,steps)timesteps653,26272
    concentration_history_array = odeint(solver.getRightSideOfODE(),concentrations,timesteps)concentration_history_array657,26400
    mass_concentrations = concentration_history_array[-1] * solver.properties.MolecularWeightmass_concentrations659,26513
    mass_concentrations = concentrations * solver.properties.MolecularWeightmass_concentrations678,27289
    mass_fractions = mass_concentrations / mass_concentrations.sum()mass_fractions679,27366
    gas_phase_concentrations = concentrations / solver.properties.PartitionCoefficientgas_phase_concentrations681,27440

ctml_writer.py,7178
import stringstring15,293
class CTI_Error:CTI_Error17,308
    def __init__(self, msg):__init__20,413
indent = ['',indent28,539
class XMLnode:XMLnode47,947
    def __init__(self, name="--", value = ""):__init__52,1099
    def name(self):name72,1828
    def nChildren(self):nChildren76,1915
    def addChild(self, name, value=""):addChild80,2016
    def addComment(self, comment):addComment93,2439
    def value(self):value97,2571
    def child(self, name=""):child101,2673
    def __getitem__(self, key):__getitem__105,2790
    def __setitem__(self, key, value):__setitem__109,2915
    def __call__(self):__call__113,3064
    def write(self, file):write117,3181
    def _write(self, f, level = 0):_write124,3383
OneAtm = 1.01325e5OneAtm176,5158
OneBar = 1.0e5OneBar177,5177
import types, math, copytypes180,5194
import types, math, copymath180,5194
import types, math, copycopy180,5194
_ulen = 'm' _ulen183,5236
_umol = 'kmol'_umol184,5249
_umass = 'kg'_umass185,5264
_utime = 's'_utime186,5278
_ue = 'J/kmol'_ue187,5291
_uenergy = 'J'_uenergy188,5306
_upres = 'Pa'_upres189,5321
_length = {'cm':0.01, 'm':1.0, 'mm':0.001}_length192,5380
_moles = {'kmol':1.0, 'mol':0.001, 'molec':1.0/6.023e26}_moles193,5423
_time = {'s':1.0, 'min':60.0, 'hr':3600.0}_time194,5480
_pref = 1.0e5    # 1 bar_pref197,5553
_name = 'noname'_name199,5579
_elements = []_elements202,5635
_species = []_species203,5650
_speciesnames = []_speciesnames204,5664
_phases = []_phases205,5683
_reactions = []_reactions206,5696
_atw = {}_atw207,5712
_enames = {}_enames208,5722
_valsp = ''_valsp210,5736
_valrxn = ''_valrxn211,5748
_valexport = ''_valexport212,5761
_valfmt = ''_valfmt213,5777
def export_species(file, fmt = 'CSV'):export_species215,5791
def validate(species = 'yes', reactions = 'yes'):validate221,5916
def isnum(a):isnum227,6057
def is_local_species(name):is_local_species234,6239
def dataset(nm):dataset240,6395
def standard_pressure(p0):standard_pressure245,6521
def units(length = '', quantity = '', mass = '', time = '',units250,6632
def ufmt(base, n):ufmt262,7067
def write():write270,7312
def addFloat(x, nm, val, fmt='', defunits=''):addFloat303,8048
def getAtomicComp(atoms):getAtomicComp330,8611
def getReactionSpecies(s):getReactionSpecies340,8837
class element:element383,10346
    def __init__(self, symbol = '',__init__384,10361
    def build(self, db):build393,10621
class species_set:species_set400,10797
    def __init__(self, name = '', species = []):__init__401,10816
    def build(self, p):build406,10959
class species:species417,11300
    def __init__(self,__init__420,11341
    def export(self, f, fmt = 'CSV'):export459,12531
    def build(self, p):build478,13135
class thermo:thermo508,14214
    def _build(self, p):_build510,14302
    def export(self, f, fmt = 'CSV'):export512,14363
class NASA(thermo):NASA516,14424
    def __init__(self, range = (0.0, 0.0), __init__519,14493
    def export(self, f, fmt='CSV'):export528,14762
    def build(self, t):build535,15005
class Shomate(thermo):Shomate557,15700
    def __init__(self, range = (0.0, 0.0), __init__560,15775
    def build(self, t):build569,16055
class const_cp(thermo):const_cp588,16656
    def __init__(self, __init__591,16719
    def build(self, t):build597,16927
class gas_transport:gas_transport609,17422
    def __init__(self, geom = 'nonlin',__init__612,17508
    def build(self, t):build622,17842
class Arrhenius:Arrhenius635,18421
    def __init__(self,__init__636,18438
    def build(self, p, units_factor = 1.0,build654,18895
def stick(A = 0.0, n = 0.0, E = 0.0, coverage = []):stick702,20873
def getPairs(s):getPairs706,21012
class reaction:reaction714,21158
    def __init__(self,__init__715,21174
    def build(self, p):build761,22498
class three_body_reaction(reaction):three_body_reaction907,27214
    def __init__(self,__init__908,27251
    def build(self, p):build930,27876
class falloff_reaction(reaction):falloff_reaction943,28162
    def __init__(self,__init__944,28196
    def build(self, p):build986,29528
class surface_reaction(reaction):surface_reaction999,29884
    def __init__(self,__init__1001,29919
class edge_reaction(reaction):edge_reaction1011,30205
    def __init__(self,__init__1013,30237
class state:state1028,30581
    def __init__(self,__init__1029,30594
    def build(self, ph):build1043,31025
class phase:phase1053,31496
    def __init__(self,__init__1056,31557
    def is_ideal_gas(self):is_ideal_gas1142,34474
    def is_pure(self):is_pure1146,34581
    def has_species(self, s):has_species1149,34622
    def conc_dim(self):conc_dim1155,34810
    def buildrxns(self, p):buildrxns1161,34980
    def build(self, p):build1199,36391
class ideal_gas(phase):ideal_gas1230,37339
    def __init__(self,__init__1232,37395
    def build(self, p):build1256,38097
    def is_ideal_gas(self):is_ideal_gas1265,38356
class stoichiometric_solid(phase):stoichiometric_solid1269,38403
    def __init__(self,__init__1276,38814
    def conc_dim(self):conc_dim1293,39359
    def build(self, p):build1298,39539
class stoichiometric_liquid(stoichiometric_solid):stoichiometric_liquid1310,39916
    def __init__(self,__init__1313,40084
class metal(phase):metal1349,41419
    def __init__(self,__init__1351,41458
    def conc_dim(self):conc_dim1366,41916
    def build(self, p):build1369,41970
class incompressible_solid(phase):incompressible_solid1381,42337
    def __init__(self,__init__1383,42407
    def conc_dim(self):conc_dim1400,42952
    def build(self, p):build1403,43007
class lattice:lattice1415,43383
    def __init__(self, name = '', site_density = -1.0,__init__1416,43398
    def build(self,p):build1426,43816
class lattice_solid(phase):lattice_solid1434,44065
    def __init__(self,__init__1436,44158
    def conc_dim(self):conc_dim1453,44721
    def build(self, p):build1456,44775
class liquid_vapor(phase):liquid_vapor1473,45237
    def __init__(self,__init__1480,45556
    def conc_dim(self):conc_dim1494,45963
    def build(self, p):build1497,46017
class ideal_interface(phase):ideal_interface1505,46257
    def __init__(self,__init__1507,46317
    def build(self, p):build1528,46989
    def conc_dim(self):conc_dim1540,47383
class edge(phase):edge1544,47432
    def __init__(self,__init__1546,47503
    def build(self, p):build1567,48167
    def conc_dim(self):conc_dim1579,48554
class Troe:Troe1587,48714
    def __init__(self, A = 0.0, T3 = 0.0, T1 = 0.0, T2 = -999.9):__init__1589,48731
    def build(self, p):build1595,48921
class SRI:SRI1603,49083
    def __init__(self, A = 0.0, B = 0.0, C = 0.0, D = -999.9, E=-999.9):__init__1604,49094
    def build(self, p):build1610,49300
class Lindemann:Lindemann1618,49461
    def __init__(self):__init__1619,49478
    def build(self, p):build1621,49515
    import sys, ossys1630,49664
    import sys, osos1630,49664
    file = sys.argv[1]file1631,49683
    base = os.path.basename(file)base1632,49706

evapor.py,1990
import ctml_writer as ctmlctml1,0
from numpy import pi,exp, append, arange, array, zerospi2,27
from numpy import pi,exp, append, arange, array, zerosexp2,27
from numpy import pi,exp, append, arange, array, zerosappend2,27
from numpy import pi,exp, append, arange, array, zerosarange2,27
from numpy import pi,exp, append, arange, array, zerosarray2,27
from numpy import pi,exp, append, arange, array, zeroszeros2,27
from scipy.integrate import odeintodeint3,82
from tools import diffusivity_hco_in_airdiffusivity_hco_in_air4,117
from chemistry import ChemistrySolverChemistrySolver6,159
import copycopy7,197
units = ctml.unitsunits9,210
OneAtm = ctml.OneAtmOneAtm10,229
R = 8.314472 # J/mol KR11,250
class FuelComponent():FuelComponent13,274
    def __str__(self):__str__17,432
    def __init__(self, name="",__init__19,497
class LiquidFilmCell:LiquidFilmCell31,987
    def __init__(self, fuel=[], solver=ChemistrySolver(), diameter=1, thickness=1, length=1,__init__37,1259
    def setEvapFlux(self, evapFlux):setEvapFlux89,3856
    def setCHO(self, nC, nH, nO):setCHO94,4090
    def massDens(self, massDens):massDens107,4634
    def setMolDens(self, molDens):setMolDens112,4804
    def setVolFrac(self, volFrac):setVolFrac117,4978
    def update(self):update129,5359
    def setAntoine(self, A, B, C):setAntoine149,6283
    def getVaporDens(self):getVaporDens167,6843
    def vaporDiff(self, Lv=1):vaporDiff173,7003
    def rightSideofODE(self, Y, t):rightSideofODE190,7554
    def advance(self, t, plotresult=False):advance209,8192
            import matplotlib.pyplot as pltmatplotlib214,8389
            import matplotlib.pyplot as pltplt214,8389
	dia = 0.14E-3dia228,8861
	L = 0.5E-3L229,8876
	initial_film_thickness = 3E-6initial_film_thickness230,8888
	diesel = LiquidFilmCell(nSpecies=7, T=473, diameter=dia, length=L, thickness=initial_film_thickness)diesel232,8920
	qi = diesel.vaporDiff(Lv=dia)qi255,10309

processRMGresults.py,770
import os, sys, shutilos5,86
import os, sys, shutilsys5,86
import os, sys, shutilshutil5,86
def drawMolecules(RMG_results):drawMolecules7,110
    import rere11,299
    import openbabel, pybelopenbabel12,313
    import openbabel, pybelpybel12,313
def convertChemkin2Cantera(RMG_results):convertChemkin2Cantera90,4892
    from Cantera import ck2ctick2cti95,5044
def convertFinalModel2MixMaster(RMG_results):convertFinalModel2MixMaster108,5433
def makeTableOfSpecies(RMG_results):makeTableOfSpecies171,7709
    import ctml_writerctml_writer174,7824
    import jinja2jinja2192,8409
def loadMixMaster(RMG_results):loadMixMaster308,11207
    from MixMaster import MixMasterMixMaster311,11295
    RMG_results = "RMG_results"RMG_results316,11411

test2d.py,5133
from numpy import arange,zeros,ones,averagearange3,40
from numpy import arange,zeros,ones,averagezeros3,40
from numpy import arange,zeros,ones,averageones3,40
from numpy import arange,zeros,ones,averageaverage3,40
dia = 0.14E-3dia9,204
L = 0.5E-3 L10,218
initial_film_thickness = 3E-6initial_film_thickness11,230
T = 473T12,260
diesel = LiquidFilmCell(nSpecies=7,T=T,diameter = dia, length = L, thickness = initial_film_thickness )diesel17,376
        nH=[24,28,10,34,26,40,44],nH19,521
        nO=[0,0,0,0,0,0,0])nO20,556
        A=[6.9722,7.00756,7.03592,7.02867,7.8148,7.0153,7.0842],A33,1124
        B=[1569.57,1690.67,1826.948,1830.51,2396.8,1932.8,2054],B34,1189
        C=[187.7,174.22,195.002,154.45,199.5736,137.6,120.1])C35,1254
Dvi = diffusivity_hco_in_air(T=diesel.T,p=diesel.P/10.**5,Dvi41,1501
Pi = diesel.Psat*diesel.molFracPi43,1608
Ri = R/diesel.molWeightRi44,1640
rhovi = Pi/Ri/diesel.T #kg/m3rhovi45,1664
from add import CylinderizerCylinderizer51,1769
nx = 7nx52,1798
ny = 20ny53,1805
dy = L/ny   dy54,1813
dx = dia/2./nxdx55,1826
h = zeros(ny)h57,1852
evapDensity = zeros([diesel.nSpecies,ny])evapDensity58,1866
liquidConc= zeros([ny,diesel.nSpecies])liquidConc59,1908
liquidMolFrac = zeros([ny,diesel.nSpecies+2])liquidMolFrac60,1948
evapFlux= zeros([diesel.nSpecies,ny])evapFlux61,1994
mesh1 = Grid2D(dx=dx, dy=dy, nx=nx, ny=ny) mesh163,2033
Loutside = 10.*dia/2Loutside64,2077
mesh2 = Grid2D(dx=dx, dy=dy, nx=Loutside/dx, ny=Loutside/dy) + ((0,),(L,))mesh265,2098
mesh = Cylinderizer(mesh1+mesh2)mesh66,2173
phi = [phi71,2264
            where=(Y<=L))where87,2913
            where=(Y>L) & (Y<(L+dia/2.)) & (X<=dia/2.))where89,3000
            where=(Y>L) & (Y<(L+dia/2.)) & (X>=dia/2.) & (X<=dia))where91,3141
cellEvap = mesh.getCells()[(X==dia/2-dx/2)&(Y<=L)]cellEvap94,3244
cellIDsEvap = [cell.getID() for cell in cellEvap]cellIDsEvap95,3295
facesTopBottom= (mesh.getExteriorFaces() & (y==L))facesTopBottom96,3345
facesBotRight= (mesh.getExteriorFaces() & (y<=L) &(x==dia/2))facesBotRight97,3396
valueRight = rhovivalueRight98,3458
import copycopy104,3512
dieselSet = [copy.deepcopy(diesel) for i in xrange(ny)]dieselSet105,3524
            A=[6.9722,7.00756,7.03592,7.02867,7.8148,7.0153,7.0842],A109,3680
            B=[1569.57,1690.67,1826.948,1830.51,2396.8,1932.8,2054],B110,3749
            C=[187.7,174.22,195.002,154.45,199.5736,137.6,120.1])C111,3818
timeStepDuration = 0.9*dx**2/(2*average(Dvi))*10timeStepDuration115,3921
steps=20000steps116,3970
dryPosition = nydryPosition117,3982
f = open('./data/grid.dat','w')f122,4231
f1 = open('./data/timeHistoryinlet.plt','w')f1135,4673
f2 = open('./data/timeHistoryoutlet.plt','w')f2136,4718
f1 = open('timeHistorymiddle.plt','w')f1141,4956
f2 = open('timeHistoryoutlet2.plt','w')f2142,4995
cellIDsOutlet = range((ny-1)*nx,ny*nx)cellIDsOutlet147,5227
outFlux = zeros(diesel.nSpecies)outFlux148,5266
totaltime = 0.totaltime150,5306
    tmpphi = CellVariable(name="tmp",mesh=mesh,value=0.)  tmpphi152,5347
    facesDry= (mesh.getExteriorFaces() & (y<=L) &(x==dia/2) & (y>(dryPosition)*dy))facesDry153,5406
        valueEvap = evapDensity[species_index,:]valueEvap155,5539
        boundaryConditions = (FixedValue(faces=mesh.getFacesTop(),value=0),boundaryConditions156,5588
                    value=valueRight[species_index]))value161,5902
        eq = TransientTerm() == ImplicitDiffusionTerm(coeff=Dvi[species_index])eq162,5956
                boundaryConditions = boundaryConditions,boundaryConditions164,6077
                dt=timeStepDuration)dt165,6134
        tmpphi=tmpphi+phi[species_index]/diesel.molWeight[species_index]tmpphi171,6494
    dtEvap = arange(0.,timeStepDuration+timeStepDuration,timeStepDuration)dtEvap175,6700
    h = initial_film_thickness*0.01*ones(ny)h176,6775
    evapDensity = zeros([diesel.nSpecies,ny])evapDensity177,6820
    liquidConc= zeros([ny,diesel.nSpecies])liquidConc178,6866
    liquidMolFrac = zeros([ny,diesel.nSpecies+2])liquidMolFrac179,6910
        timeStepDuration = 0.9*dx**2/(2*average(Dvi))*2timeStepDuration190,7426
        timeStepDuration = 0.9*dx**2/(2*average(Dvi))/5.timeStepDuration192,7523
    totaltime = totaltime + timeStepDurationtotaltime194,7581
        f1 = open('./data/timeHistoryinlet.plt','a')f1197,7652
        f2 = open('./data/timeHistoryoutlet.plt','a')f2198,7705
        f3 = open('./data/timeHistorymiddle.plt','a')f3199,7759
        f4 = open('./data/timeHistoryoutlet2.plt','a')f4200,7813
        facesDry = facesBotRightfacesDry212,8720
        name = [i.name for i in phi]name222,9006
        name = ['z','h']+namename223,9043
        result =column_stack((h,liquidConc,liquidMolFrac))result224,9073
        result = column_stack((mesh.getCellCenters()[1][cellIDsEvap],result))result225,9132
        filename = './data/liquid%05d.txt'%stepfilename226,9210
        f = open(filename,'w')f227,9258
        filename = './data/vapor%05d.plt'%stepfilename235,9524
        f = open(filename,'w')f236,9571

tools.py,108
def diffusivity_hco_in_air(T,p,nC,nH,nO):diffusivity_hco_in_air1,0
    from numpy import sqrtsqrt12,381
